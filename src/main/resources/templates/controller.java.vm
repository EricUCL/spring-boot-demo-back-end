package ${package.Controller};


import org.springframework.web.bind.annotation.RequestMapping;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.Map;
import javax.annotation.Resource;

import com.example.demo.entity.${entity};
import com.example.demo.service.${table.serviceName};

#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
@RequestMapping("#if(${package.ModuleName})/${package.ModuleName}#end/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
    #if(${superControllerClass})
    public class ${table.controllerName} extends ${superControllerClass} {
    #else
    public class ${table.controllerName} {
    #end
        @Resource
        private ${table.serviceName} ${table.entityPath}Service;

        @PostMapping
        public Boolean save(@RequestBody ${entity} ${table.entityPath}) {
            return ${table.entityPath}Service.saveOrUpdate(${table.entityPath});
        }

        @DeleteMapping("/{id}")
        public Boolean delete(@PathVariable Integer id) {
            return ${table.entityPath}Service.removeById(id);
        }

@PostMapping("/delete/batch")
public boolean deleteUserByIdBatch(@RequestBody List<Integer> ids) {
        return ${table.entityPath}Service.removeBatchByIds(ids);
        }

        @GetMapping
        public List<${entity}> findAll() {
            return ${table.entityPath}Service.list();
        }

        @GetMapping("/{id}")
        public ${entity} findOne(@PathVariable Integer id) {
            return ${table.entityPath}Service.getById(id);
        }

        @GetMapping("/page")
        public Page<${entity}> findPage(@RequestParam Integer pageNum,
        @RequestParam Integer pageSize) {
        IPage<User> page = new Page<>(pageNum, pageSize);
        QueryWrapper<User> queryWrapper = new QueryWrapper<>();
        queryWrapper.orderByDesc("id");
            return ${table.entityPath}Service.page(new Page<>(pageNum, pageSize));
        }
    }

#end